// Code generated by MockGen. DO NOT EDIT.
// Source: product-repo.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	entity "github.com/gendutski/be-candidate-home-test/core/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockProductRepo is a mock of ProductRepo interface.
type MockProductRepo struct {
	ctrl     *gomock.Controller
	recorder *MockProductRepoMockRecorder
}

// MockProductRepoMockRecorder is the mock recorder for MockProductRepo.
type MockProductRepoMockRecorder struct {
	mock *MockProductRepo
}

// NewMockProductRepo creates a new mock instance.
func NewMockProductRepo(ctrl *gomock.Controller) *MockProductRepo {
	mock := &MockProductRepo{ctrl: ctrl}
	mock.recorder = &MockProductRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductRepo) EXPECT() *MockProductRepoMockRecorder {
	return m.recorder
}

// GetProductByIDs mocks base method.
func (m *MockProductRepo) GetProductByIDs(ids []int64) ([]*entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByIDs", ids)
	ret0, _ := ret[0].([]*entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByIDs indicates an expected call of GetProductByIDs.
func (mr *MockProductRepoMockRecorder) GetProductByIDs(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByIDs", reflect.TypeOf((*MockProductRepo)(nil).GetProductByIDs), ids)
}

// GetProductBySerials mocks base method.
func (m *MockProductRepo) GetProductBySerials(serials []string) ([]*entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductBySerials", serials)
	ret0, _ := ret[0].([]*entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductBySerials indicates an expected call of GetProductBySerials.
func (mr *MockProductRepoMockRecorder) GetProductBySerials(serials interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductBySerials", reflect.TypeOf((*MockProductRepo)(nil).GetProductBySerials), serials)
}

// SubmitCheckout mocks base method.
func (m *MockProductRepo) SubmitCheckout(payload *entity.Checkout) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitCheckout", payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitCheckout indicates an expected call of SubmitCheckout.
func (mr *MockProductRepoMockRecorder) SubmitCheckout(payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitCheckout", reflect.TypeOf((*MockProductRepo)(nil).SubmitCheckout), payload)
}
